{
  email {$EMAIL}
  
  # Enable admin API for configuration management
  admin localhost:2019
  
  # Set default log format
  log {
    output stdout
    format console
    level INFO
  }
  
  # Global rate limiting (optional, uncomment if needed)
  # servers {
  #   max_header_size 16KB
  #   read_timeout 30s
  #   write_timeout 30s
  #   idle_timeout 120s
  # }
  
  # Uncomment for Cloudflare TLS - requires cloudflare plugin
  # acme_ca https://acme-v02.api.letsencrypt.org/directory
  # acme_dns cloudflare {$CLOUDFLARE_API_TOKEN}
}

(default) {
  encode zstd gzip
}

(static) {
  @static {
    file
    path *.ico *.css *.js *.gif *.jpeg *.jpg *.png *.webp *.svg *.ttf *.json *.woff *.woff2 *.eot *.otf *.map
  }
  header @static {
    Cache-Control "public, max-age=31536000, immutable"
    Vary "Accept-Encoding"
  }
}

(security) {
  header {
    # Enable HSTS with preload
    Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
    # Enable cross-site filter (XSS) and tell browser to block detected attacks
    X-Xss-Protection "1; mode=block"
    # Disable clients from sniffing media type
    X-Content-Type-Options nosniff
    # Prevent framing (clickjacking protection)
    X-Frame-Options DENY
    # Control referrer information
    Referrer-Policy "strict-origin-when-cross-origin"
    # Content Security Policy - customize based on your needs
    Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; frame-ancestors 'none'; form-action 'self'; upgrade-insecure-requests"
    # Permissions policy (formerly Feature Policy)
    Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()"
    # Hide server information
    -Server
    -Link
    -X-Powered-By
    -X-AspNet-Version
    -X-AspNetMvc-Version
  }
}

(cors) {
  @cors_preflight method OPTIONS
  @cors header Origin {args.0}

  handle @cors_preflight {
    header Access-Control-Allow-Origin "{args.0}"
    header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS"
    header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, X-File-Name"
    header Access-Control-Allow-Credentials "true"
    header Access-Control-Max-Age "86400"
    respond "" 204
  }

  handle @cors {
    header Access-Control-Allow-Origin "{args.0}"
    header Access-Control-Allow-Credentials "true"
    header Access-Control-Expose-Headers "Link, Location, X-Total-Count"
  }
}

(rate_limit) {
  rate_limit {
    zone dynamic_ip {
      key {remote_host}
      events 100
      window 1m
    }
    zone static_ip {
      key {remote_host}
      events 1000
      window 1h
    }
  }
}

(logging) {
  log {
    output file /var/log/caddy/{args.0}.log {
      roll_size 100mb
      roll_keep 5
      roll_keep_for 168h
    }
    format console
    level INFO
  }
}

(errors) {
  handle_errors {
    rewrite * /{err.status_code}
    reverse_proxy https://http.cat {
      header_up Host {upstream_hostport}
      replace_status {err.status_code}
    }
  }
}

# Example: Cloudflare TLS configuration
# Uncomment and configure when using Cloudflare Origin CA
# {$DOMAIN_NAME} {
#     import default
#     import security
#     import logging {$DOMAIN_NAME}
#     
#     # Cloudflare Origin CA certificates with client authentication
#     tls /etc/ssl/certs/{$DOMAIN_NAME}.pem /etc/ssl/private/{$DOMAIN_NAME}.key {
#         client_auth {
#             mode require_and_verify
#             trust_pool /etc/ssl/certs/cloudflare-origin-ca.pem
#         }
#         protocols tls1.2 tls1.3
#     }
#     
#     # Optional: Rate limiting (recommended with Cloudflare)
#     # import rate_limit
#     
#     # Health check endpoint
#     handle /health {
#         respond "OK" 200
#     }
#     
#     # Main application
#     handle {
#         reverse_proxy www:3002
#     }
# }

# Default configuration (Let's Encrypt)
{$DOMAIN_NAME} {
    import default
    import security
    import logging {$DOMAIN_NAME}
    
    # Optional: Enable rate limiting
    # import rate_limit
    
    # Health check endpoint
    handle /health {
        respond "OK" 200
    }
    
    # Main application
    handle {
        reverse_proxy www:3002
    }
}
